{"version":3,"sources":["components/Name.js","components/WindowSize.js","components/Canvas.js","components/ColorPicker.js","components/RefreshButton.js","components/Paint.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","useState","name","setName","className","value","onChange","e","target","onClick","setSelectionRange","length","placeholder","useWindowSize","cb","window","innerWidth","innerHeight","windowWidth","windowHeight","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","Canvas","props","drawing","setDrawing","width","setWidth","height","setHeight","canvasRef","useRef","ctx","current","getContext","stopDrawing","closePath","ref","onMouseDown","lineJoin","lineCap","lineWidth","strokeStyle","color","beginPath","moveTo","clientX","offsetLeft","clientY","offsetTop","onMouseUp","onMouseOut","onMouseMove","coords","lineTo","stroke","handleMouseMove","ColorPicker","colors","activeColor","setActiveColor","map","i","key","type","checked","style","background","Paint","setColors","getColors","useCallback","baseColor","randomColor","slice","fetch","then","res","json","hex","visible","setVisible","timeoutId","clearTimeout","setTimeout","borderTop","Name","marginTop","RefreshButton","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2PAEeA,MAAMC,MAAK,WAAO,IAAD,EACNC,mBAAS,IADH,mBACvBC,EADuB,KACjBC,EADiB,KAE9B,OACE,2BAAOC,UAAU,eACf,2BACEC,MAAOH,EACPI,SAAU,SAAAC,GAAC,OAAIJ,EAAQI,EAAEC,OAAOH,QAChCI,QAAS,SAAAF,GAAC,OAAIA,EAAEC,OAAOE,kBAAkB,EAAGH,EAAEC,OAAOH,MAAMM,SAC3DC,YAAY,iBCRL,SAASC,EAAcC,GAAK,IAAD,EACab,mBAAS,CAACc,OAAOC,WAAYD,OAAOE,cADjD,yCAChCC,EADgC,KACnBC,EADmB,KACJC,EADI,KAWxC,OARAC,qBAAU,WACR,IAAMC,EAAe,WACnBR,IACAM,EAAc,CAACL,OAAOC,WAAYD,OAAOE,eAG3C,OADAF,OAAOQ,iBAAiB,SAAUD,GAC3B,kBAAMP,OAAOS,oBAAoB,SAAUF,MACjD,IACI,CAACJ,EAAaC,GCVR,SAASM,EAAOC,GAAQ,IAAD,EACNzB,oBAAS,GADH,mBAC7B0B,EAD6B,KACpBC,EADoB,OAEV3B,mBAASc,OAAOC,YAFN,mBAE7Ba,EAF6B,KAEtBC,EAFsB,OAGR7B,mBAASc,OAAOE,aAHR,mBAG7Bc,EAH6B,KAGrBC,EAHqB,KAK9BC,EAAYC,mBACZC,EAAMD,mBAEZb,qBAAU,WACRc,EAAIC,QAAUH,EAAUG,QAAQC,WAAW,QAC1C,IAViC,MAYAxB,GAAc,WAChDiB,EAASf,OAAOC,YAChBgB,EAAUjB,OAAOE,gBAdiB,6BA4CpC,SAASqB,IACPH,EAAIC,QAAQG,YACZX,GAAW,GAGb,OAAO,4BACLY,IAAKP,EACLJ,MAAOH,EAAMG,OAASA,EACtBE,OAAQL,EAAMK,QAAUA,EACxBU,YAtBF,SAAsBlC,GACpB4B,EAAIC,QAAQM,SAAW,QACvBP,EAAIC,QAAQO,QAAU,QACtBR,EAAIC,QAAQQ,UAAY,GACxBT,EAAIC,QAAQS,YAAcnB,EAAMoB,MAChCX,EAAIC,QAAQW,YAEZZ,EAAIC,QAAQY,OACVzC,EAAE0C,QAAUhB,EAAUG,QAAQc,WAC9B3C,EAAE4C,QAAUlB,EAAUG,QAAQgB,WAEhCxB,GAAW,IAYXyB,UAAWf,EACXgB,WAAYhB,EACZiB,YAvCF,SAAyBhD,GAEvB,IAIa,EAJPiD,EAAS,CACbjD,EAAE0C,QAAUhB,EAAUG,QAAQc,WAC9B3C,EAAE4C,QAAUlB,EAAUG,QAAQgB,WAE5BzB,KACF,EAAAQ,EAAIC,SAAQqB,OAAZ,QAAsBD,GACtBrB,EAAIC,QAAQsB,UAEVhC,EAAMiC,iBACNjC,EAAMiC,gBAAN,MAAAjC,EAAyB8B,MC7BlB,SAASI,EAAT,GAAoE,IAAD,IAA5CC,cAA4C,MAAnC,GAAmC,EAA/BC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,eAC9D,OAAKF,EAAOlD,OAEV,8BAAUP,UAAU,gBACjByD,EAAOG,KAAI,SAAClB,EAAOmB,GAAR,OACV,2BAAOC,IAAKD,GACV,2BACE/D,KAAK,QACLiE,KAAK,QACL9D,MAAOyC,EACPsB,QAASN,IAAgBhB,EACzBxC,SAAU,kBAAMyD,EAAejB,MAEjC,0BAAMuB,MAAO,CAAEC,WAAYxB,UAZR,KCDd/C,UAAMC,MAAK,YAAa,IAAVc,EAAS,EAATA,GAC3B,OAAO,4BAAQV,UAAU,wBAAwBK,QAASK,GAAnD,a,gBCKM,SAASyD,IAAS,IAAD,EACFtE,mBAAS,IADP,mBACvB4D,EADuB,KACfW,EADe,OAEQvE,mBAAS,MAFjB,mBAEvB6D,EAFuB,KAEVC,EAFU,KAGxBU,EAAYC,uBAAY,WAC5B,IAAMC,EAAYC,MAAcC,MAAM,GACtCC,MAAM,0CAAD,OAA2CH,EAA3C,qBACJI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJR,EAAUQ,EAAInB,OAAOG,KAAI,SAAAlB,GAAK,OAAIA,EAAMoC,IAAI7E,UAC5C0D,EAAeiB,EAAInB,OAAO,GAAGqB,IAAI7E,YAElC,IACHgB,oBAAUoD,EAAW,IAZS,MAcAxE,oBAAS,GAdT,mBAcvBkF,EAduB,KAcdC,EAdc,KAe1BC,EAAYnD,mBAfc,EAgBMrB,GAAc,WAChDuE,GAAW,GACXE,aAAaD,EAAUjD,SACvBiD,EAAUjD,QAAUmD,YAAW,kBAAMH,GAAW,KAAQ,QAnB5B,mBAgBvBlE,EAhBuB,KAgBVC,EAhBU,KAsB9B,OACE,yBAAKf,UAAU,OACb,4BAAQiE,MAAO,CAAEmB,UAAU,cAAD,OAAgB1B,KACxC,6BACE,kBAAC2B,EAAD,OAEF,yBAAKpB,MAAO,CAAEqB,UAAW,KACvB,kBAAC9B,EAAD,CACEC,OAAQA,EACRC,YAAaA,EACbC,eAAgBA,IAElB,kBAAC4B,EAAD,CAAe7E,GAAI2D,MAGtBX,GACC,kBAACrC,EAAD,CACEqB,MAAOgB,EACP/B,OAAQhB,OAAOE,cAGnB,yBAAKb,UAAS,sBAAiB+E,EAAU,GAAK,WAC3CjE,EADH,MACmBC,IChDV,SAASyE,IACtB,OAAO,kBAACrB,EAAD,MCOWsB,QACW,cAA7B9E,OAAO+E,SAASC,UAEe,UAA7BhF,OAAO+E,SAASC,UAEhBhF,OAAO+E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb0f12df.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default React.memo(() => {\r\n  const [name, setName] = useState('')\r\n  return (\r\n    <label className=\"header-name\">\r\n      <input\r\n        value={name}\r\n        onChange={e => setName(e.target.value)}\r\n        onClick={e => e.target.setSelectionRange(0, e.target.value.length)}\r\n        placeholder=\"Untitled\"\r\n      />\r\n    </label>\r\n  )\r\n})","import { useState, useEffect } from 'react'\r\n\r\nexport default function useWindowSize(cb) {\r\n  const [[windowWidth, windowHeight], setWindowSize] = useState([window.innerWidth, window.innerHeight])\r\n  \r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      cb()\r\n      setWindowSize([window.innerWidth, window.innerHeight])\r\n    }\r\n    window.addEventListener('resize', handleResize)\r\n    return () => window.removeEventListener('resize', handleResize)\r\n  }, [])\r\n  return [windowWidth, windowHeight]\r\n}","import React, { useState, useEffect, useRef } from 'react'\r\nimport useWindowSize from './WindowSize'\r\n\r\nexport default function Canvas(props) {\r\n  const [drawing, setDrawing] = useState(false)\r\n  const [width, setWidth] = useState(window.innerWidth)\r\n  const [height, setHeight] = useState(window.innerHeight)\r\n  \r\n  const canvasRef = useRef()\r\n  const ctx = useRef()\r\n  \r\n  useEffect(() => {\r\n    ctx.current = canvasRef.current.getContext('2d')\r\n  }, [])\r\n  \r\n  const [windowWidth, windowHeight] = useWindowSize(() => {\r\n    setWidth(window.innerWidth)\r\n    setHeight(window.innerHeight)\r\n  })\r\n  \r\n  function handleMouseMove(e) {\r\n    // actual coordinates\r\n    const coords = [\r\n      e.clientX - canvasRef.current.offsetLeft,\r\n      e.clientY - canvasRef.current.offsetTop\r\n    ]\r\n    if (drawing) { \r\n      ctx.current.lineTo(...coords)\r\n      ctx.current.stroke()\r\n    }\r\n    if (props.handleMouseMove) {\r\n        props.handleMouseMove(...coords)\r\n    }\r\n  }\r\n  function startDrawing(e) {\r\n    ctx.current.lineJoin = 'round'\r\n    ctx.current.lineCap = 'round'\r\n    ctx.current.lineWidth = 10\r\n    ctx.current.strokeStyle = props.color\r\n    ctx.current.beginPath();\r\n    // actual coordinates\r\n    ctx.current.moveTo(\r\n      e.clientX - canvasRef.current.offsetLeft,\r\n      e.clientY - canvasRef.current.offsetTop\r\n    )\r\n    setDrawing(true)\r\n  }\r\n  function stopDrawing() {\r\n    ctx.current.closePath()\r\n    setDrawing(false)\r\n  }\r\n  \r\n  return <canvas\r\n    ref={canvasRef}\r\n    width={props.width || width}\r\n    height={props.height || height}\r\n    onMouseDown={startDrawing}\r\n    onMouseUp={stopDrawing}\r\n    onMouseOut={stopDrawing}\r\n    onMouseMove={handleMouseMove}\r\n  />\r\n}","import React from 'react'\r\n\r\nexport default function ColorPicker({ colors = [], activeColor, setActiveColor }) {\r\n  if (!colors.length) return null\r\n  return (\r\n    <fieldset className=\"color-picker\">\r\n      {colors.map((color, i) => (\r\n        <label key={i}>\r\n          <input\r\n            name=\"color\"\r\n            type=\"radio\"\r\n            value={color}\r\n            checked={activeColor === color}\r\n            onChange={() => setActiveColor(color)}\r\n          />\r\n          <span style={{ background: color }} />\r\n        </label>\r\n      ))}\r\n    </fieldset>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default React.memo(({ cb }) => {\r\n  return <button className=\"button-refresh-colors\" onClick={cb}>&#8634;</button>\r\n})","import React, { useState, useEffect, useCallback, useRef } from 'react'\r\nimport Name from './Name'\r\nimport Canvas from './Canvas'\r\nimport ColorPicker from './ColorPicker'\r\nimport RefreshButton from './RefreshButton'\r\nimport useWindowSize from './WindowSize'\r\nimport randomColor from 'randomcolor'\r\n\r\nexport default function Paint() {\r\n  const [colors, setColors] = useState([])\r\n  const [activeColor, setActiveColor] = useState(null)\r\n  const getColors = useCallback(() => {\r\n    const baseColor = randomColor().slice(1);\r\n    fetch(`https://www.thecolorapi.com/scheme?hex=${baseColor}&mode=monochrome`)\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setColors(res.colors.map(color => color.hex.value))\r\n      setActiveColor(res.colors[0].hex.value)\r\n    })\r\n  }, [])\r\n  useEffect(getColors, [])\r\n  \r\n  const [visible, setVisible] = useState(false)\r\n  let timeoutId = useRef()\r\n  const [windowWidth, windowHeight] = useWindowSize(() => {\r\n    setVisible(true)\r\n    clearTimeout(timeoutId.current)\r\n    timeoutId.current = setTimeout(() => setVisible(false), 500)\r\n  })\r\n  \r\n  return (\r\n    <div className=\"app\">\r\n      <header style={{ borderTop: `10px solid ${activeColor}` }}>\r\n        <div>\r\n          <Name />\r\n        </div>\r\n        <div style={{ marginTop: 10 }}>\r\n          <ColorPicker\r\n            colors={colors}\r\n            activeColor={activeColor}\r\n            setActiveColor={setActiveColor}\r\n          />\r\n          <RefreshButton cb={getColors} />\r\n        </div>\r\n      </header>\r\n      {activeColor && (\r\n        <Canvas\r\n          color={activeColor}\r\n          height={window.innerHeight}\r\n        />\r\n      )}\r\n      <div className={`window-size ${visible ? '' : 'hidden'}`}>\r\n        {windowWidth} x {windowHeight}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Paint from './components/Paint'\n\nexport default function App() {\n  return <Paint />\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}